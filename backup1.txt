#!/bin/dash   

# projet version.sh 
# Akel Ward , Aiach Rami , TD2/TP2B

# Permet l'affichage de la commande help quand on en a besoin 
# pas de paramètres attendu
usage (){
    echo "usage:
        ./version.sh --help
        ./version.sh <command> FILE [OPTION]
        where <command> can be: add amend checkout|co commit|ci diff log reset rm"

    echo "./version.sh add FILE MESSAGE
            Add FILE under versioning with the initial log message MESSAGE"

    echo "./version.sh commit|ci FILE MESSAGE
            Commit a new version of FILE with the log message MESSAGE"

    echo "./version.sh amend FILE MESSAGE
            Modify the last registered version of FILE, or (inclusive) its log message"

    echo "./version.sh checkout|co FILE [NUMBER]
            Restore FILE in the version NUMBER indicated, or in the
            latest version if there is no number passed in argument"

    echo "./version.sh diff FILE
            Displays the difference between FILE and the last committed version"

    echo "./version.sh log FILE
            Displays the logs of the versions already committed"

    echo "./version.sh reset FILE NUMBER
            Restores FILE in the version NUMBER indicated and
            deletes the versions of number strictly superior to NUMBER"

    echo "./version.sh rm FILE
            Deletes all versions of a file under versioning"
}


# affiche l'aide
help (){
    echo "Entrer ./version.sh --help for more information." >&2
}


# Implémenter une fonction de la commande add qui permet d’ajouter un fichier sous versioning et sauvegarde la version 1, qui est également la dernière version dans ce cas.
# Ne se préoccuper pas du message de log associé à la première version du fichier.
# Usage : ./version.sh add FILE MESSAGE
# FILE est le nom du fichier à ajouter sous versioning.
# MESSAGE est le message de log associé à la première version du fichier.
# Le fichier doit être ajouté dans le répertoire .versioning du répertoire courant.

add (){
    # Vérifier les arguments
    if [ $# -ne 2 ]; then
        echo "Usage : $0 add FILE MESSAGE"
        exit 1
    fi

    # Vérifier si le fichier existe
    if [ ! -f "$1" ]; then
        echo "Erreur : $1 n'est pas un fichier valide"
        exit 1
    fi

    # Créer le répertoire .versioning s'il n'existe pas
    if [ ! -d ".versioning" ]; then
        mkdir .versioning
    fi

    # Copier le fichier dans le répertoire .versioning
    cp "$1" ".versioning/$1.v1"

    # Écrire le message de log associé à la première version
    echo "$2" > ".versioning/$1.log"

    echo "Le fichier $1 a été ajouté sous versioning avec succès"
}


# Implémenter une fonction de la commande rm qui supprime toutes les versions d’un fichier sous contrôle. Demander une confirmation de la part de l’utilisateur.
# Supprimer le répertoire .versioning s’il est vide.
# Usage : ./version.sh rm FILE
# FILE est le nom du fichier à supprimer sous versioning.

rm (){
    # Vérifier les arguments
    if [ $# -ne 1 ]; then
        echo "Usage : $0 rm FILE"
        exit 1
    fi

    # Vérifier si le fichier existe dans le répertoire .versioning
    if [ ! -f ".versioning/$1.v1" ]; then
        echo "Erreur : $1 n'est pas sous versioning"
        exit 1
    fi

    # Demander une confirmation à l'utilisateur
    echo "Êtes-vous sûr de vouloir supprimer toutes les versions de $1 ? (y/n)"
    read confirmation

    if [ "$confirmation" != "y" ]; then
        echo "Suppression annulée"
        exit 0
    fi

    # Supprimer toutes les versions du fichier
    rm ".versioning/$1".*

    echo "Le fichier $1 a été supprimé avec succès"

    # Vérifier si le répertoire .versioning est vide et le supprimer le cas échéant
    if [ -z "$(ls -A .versioning)" ]; then
        rm -r .versioning
        echo "Le répertoire .versioning a été supprimé avec succès"
    fi
}


# Implémenter une fonction de la commande commit qui permet de sauvegarder une nouvelle version d’un fichier sous versioning.
# Indiquer, dans le message destiné à l’utilisateur, le numéro de la version qui vient d’être «commitée». 
# Si le fichier courant est identique à la dernière version, on ne commitera rien. (indice : cmp(1)).
# Usage : ./version.sh commit|ci FILE MESSAGE
# FILE est le nom du fichier à sauvegarder sous versioning.
# MESSAGE est le message de log associé à la nouvelle version du fichier.

commit (){
    # Vérifier les arguments
    if [ $# -ne 2 ]; then
        echo "Usage : $0 commit|ci FILE MESSAGE"
        exit 1
    fi

    # Vérifier si le fichier existe dans le répertoire .versioning
    if [ ! -f ".versioning/$1.v1" ]; then
        echo "Erreur : $1 n'est pas sous versioning"
        exit 1
    fi

    # Vérifier si le fichier courant est identique à la dernière version
    if cmp -s "$1" ".versioning/$1.v1"; then
        echo "Le fichier $1 n'a pas été modifié"
        exit 0
    fi

    # Vérifier le numéro de la dernière version
    last_version=$(ls -1 .versioning | grep "$1.v" | sort -n | tail -1 | cut -d'.' -f2)

    # Sauvegarder la nouvelle version
    cp "$1" ".versioning/$1.v$((last_version + 1))"

    # Écrire le message de log associé à la nouvelle version
    echo "$2" >> ".versioning/$1.log"

    echo "La nouvelle version du fichier $1 a été sauvegardée avec succès"
}


# Implémenter une fonction de la commande diff qui affiche la différence entre la version actuelle du fichier et la dernière version commitée. 
# Le format de la différence est le format unifié.
# Usage : ./version.sh diff FILE
# FILE est le nom du fichier à comparer.

diff (){
    # Vérifier les arguments
    if [ $# -ne 1 ]; then
        echo "Usage : $0 diff FILE"
        exit 1
    fi

    # Vérifier si le fichier existe dans le répertoire .versioning
    if [ ! -f ".versioning/$1.v1" ]; then
        echo "Erreur : $1 n'est pas sous versioning"
        exit 1
    fi

    # Vérifier le numéro de la dernière version
    last_version=$(ls -1 .versioning | grep "$1.v" | sort -n | tail -1 | cut -d'.' -f2)

    # Afficher la différence entre la version actuelle du fichier et la dernière version commitée
    diff -u "$1" ".versioning/$1.v$last_version"
}



if test $# -eq 1 && test $1 = "--help" ; then
    usage
    exit 0
elif test $# -eq 0 ; then
    echo "Erreur commande"
    help
    exit 1
else
    case $1 in
        add)
            add $2 $3
            ;;
        rm)
            rm $2
            ;;
        commit|ci)
            commit $2 $3
            ;;
        diff)
            diff $2
            ;;
        *)
            help
            exit 1
            ;;
    esac
fi